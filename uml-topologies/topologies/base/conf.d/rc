# /etc/conf.d/rc: Global config file for the Gentoo RC System

# This is the number of tty's used in most of the rc-scripts (like
# consolefont, numlock, etc ...)

RC_TTY_NUMBER=11

# Set to "yes" if you want the rc system to try and start services
# in parallel for a slight speed improvement.

RC_PARALLEL_STARTUP="no"

# RC_NET_STRICT_CHECKING allows some flexibility with the 'net' service.
# The following values are allowed:
#  none  - The 'net' service is always considered up.
#  no    - This basically means that at least one net.* service besides net.lo
#          must be up.  This can be used by notebook users that have a wifi and
#          a static nic, and only wants one up at any given time to have the
#          'net' service seen as up.
#  lo    - This is the same as the 'no' option, but net.lo is also counted.
#          This should be useful to people that do not care about any specific
#          interface being up at boot.
#  yes   - For this ALL network interfaces MUST be up for the 'net' service to
#          be considered up.

RC_NET_STRICT_CHECKING="no"

# RC_VOLUME_ORDER allows you to specify, or even remove the volume setup
# for various volume managers (MD, EVMS2, LVM, DM, etc).  Note that they are
# stopped in reverse order.

RC_VOLUME_ORDER="raid evms lvm dm"

# RC_BOOTLOG will generate a log of the boot messages shown on the console.  
# Useful for headless machines or debugging.  You need to emerge the 
# app-admin/showconsole package for this to work.  Note that this probably
# won't work correctly with boot splash.

RC_BOOTLOG="no"

# RC_USE_FSTAB allows you to override the default mount options for the 
# standard /proc, /sys, /dev, and /dev/pts mount points.  Note that this 
# is the new way for selecting ramfs/tmpfs/etc... for udev mounting.

RC_USE_FSTAB="no"

# RC_USE_CONFIG_PROFILE allows you to have different /etc/conf.d files
# based on your runlevel - if a conf.d file for your profile does not exist
# then we try and use the default one.
# To enable runlevel selection at boot, append "softlevel=foobar" to your
# kernel line to change to the foobar runlevel. Or "rc foobar" at the command
# prompt.

RC_USE_CONFIG_PROFILE="yes"

# RC_FORCE_AUTO tries its best to prevent user interaction during the boot and 
# shutdown process.  For example, fsck will automatically be run or volumes 
# remounted to create proper directory trees.  This feature can be dangerous 
# and is meant ONLY for headless machines where getting a physical console 
# hooked up is a huge pita.

RC_FORCE_AUTO="no"

# Use this variable to control the /dev management behavior.
#  auto   - let the scripts figure out what's best at boot
#  devfs  - use devfs (requires sys-fs/devfsd)
#  udev   - use udev (requires sys-fs/udev)
#  static - let the user manage /dev

RC_DEVICES="auto"

# UDEV OPTION:
# Set to "yes" if you want to save /dev to a tarball on shutdown
# and restore it on startup.  This is useful if you have a lot of
# custom device nodes that udev does not handle/know about.

RC_DEVICE_TARBALL="yes"





#
# Controlling start-stop-daemon behavior
#
# NOTE: most of these are not in use yet!!
#

# Set to "yes" if stop-daemon() should always retry killing the
# service if it fails the first time.

RC_RETRY_KILL="yes"


# Set the amount of seconds stop-daemon() should wait between
# retries.  $RC_RETRY_KILL should be set to "yes".

RC_RETRY_TIMEOUT=1


# Set the amount of times stop-daemon() should try to kill
# a service before giving up.  $RC_RETRY_KILL should be set to "yes".

RC_RETRY_COUNT=5


# Set to "yes" if stop-daemon() should fail if the service
# is marked as started, but not actually running on stop.

RC_FAIL_ON_ZOMBIE="no"





#
# Internal configuration variables
#
# NB:  These are for advanced users, and you should really
#      know what you are doing before changing them!
#

 
# rc-scripts dep-cache directory
#
# NOTE:  Do not remove the next line, as its needed by the baselayout ebuild!
#
#  svcdir="/var/lib/init.d"

svcdir="/var/lib/init.d"


# Should we mount $svcdir in a ram disk for some speed increase 
# for slower machines, or for the more extreme setups ?

svcmount="no"


# FS type that should be used for $svcdir.  Note that you need 
# $svcmount above set to "yes" for this to work ...  Currently 
# tmpfs, ramfs, and ramdisk are supported (tmpfs is the default).

svcfstype="tmpfs"


# Size of $svcdir in KB.  Note that ramfs doesn't support this 
# due to kernel limitations.

svcsize=2048
