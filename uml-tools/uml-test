#!/bin/bash
#
# Set up a simulated domain using UML
#

# Set usage output
USAGE="[-ht] <config-file>"
LONGUSAGE="\t-h\tPrint this help message
\t-t\tTest mode.  Doesn't start any processes, but generates config
\t<config-file>\tConfig file to run"

function UMLcleanup() {
	# Don't clean up if the user said to keep running
	if [ "${PERSISTENT_ROOTFS}" != "yes" ]; then
		# Stop machines
		for MACHINE in ${MACHINES}; do
			uml_mconsole ${MACHINE} halt > /dev/null 2>&1
		done
		# Stop our switches
		killall -q uml_switch
		# Clean up tap
		if [ -n "${TAPNAME}" ]; then
			tunctl -d ${TAPNAME} > /dev/null 2>&1
		fi
	else
		echo "Not killing your UMLs because you have PERSISTENT_ROOTFS set"
		echo "To stop them, run uml-test-stop ${CONFFILE}"
	fi
}

source @PREFIX@/uml-functions.sh

# Cleanup on SIGINT
trap UMLcleanup SIGINT

LINUX="linux"
TESTDIR="."
MEM="64M"
ROOTFS="root_fs"
SWAPFS="swap_fs"
HOST_DOMAIN=$(dnsdomainname)
declare -i count=0

# Main
# Parse arguments
while getopts ":ht" option; do
	case ${option} in
		t ) TESTMODE="yes";;
		h ) usage;;
		\? ) usage "Invalid argument ${OPTARG}";;
		* ) usage "Invalid argument ${option}";;
	esac
done

if [ "${OPTIND}" != "0" ]; then
	shift $((OPTIND-1))
fi

if [ -z "$1" ]; then
	usage "Error: no conf file"
fi

CONFFILE=$1
TESTNAME=`basename ${CONFFILE} .conf`
if [ -z $TESTNAME ]; then
	die "Error: conf file name \"${CONFFILE}\" invalid.  Must be in the form /path/to/file.conf"
fi

TESTDIR=`dirname ${CONFFILE}`;
if [ -z "${TESTDIR}" ]; then
	die "Error: conf file name \"${CONFFILE}\" invalid.  Must be in the form /path/to/file.conf"
fi

if [ "${TESTDIR}" == "." ]; then
	TESTDIR=$(pwd)
fi

if [ -a ${TESTDIR}/${LINUX} ]; then
	echo "Running ${TESTDIR}/${LINUX}"
elif [ -z ${TESTMODE} ]; then
	die "No ${TESTDIR}/${LINUX}"
fi

if [ -a ${TESTDIR}/${ROOTFS} ]; then
	echo "root_fs: ${TESTDIR}/${ROOTFS}"
elif [ -z ${TESTMODE} ]; then
	die "No ${TESTDIR}/${ROOTFS}"
fi

if [ -a ${TESTDIR}/${SWAPFS} ]; then
	echo "root_fs: ${TESTDIR}/${SWAPFS}"
elif [ -z ${TESTMODE} ]; then
	die "No ${TESTDIR}/${SWAPFS}"
fi

source ${CONFFILE}

# Set up the box directories and unique octets
for MACHINE in ${MACHINES}; do
	if [ ! -d ${TESTDIR}/${MACHINE}/conf.d ]; then
		if [ ! -d ${TESTDIR}/../base ]; then
			die "Cannot create machine directory for ${MACHINE}: no base dir"
		fi

		mkdir -p ${TESTDIR}/${MACHINE}/conf.d || die "Couldn't create ${TESTDIR}/${MACHINE}/conf.d"
		cd ${TESTDIR}/${MACHINE}/conf.d 
		for i in $(/bin/ls ${TESTDIR}/../base/conf.d); do
			cp -d ${TESTDIR}/../base/conf.d/$i . || die "Couldn't copy $i"
		done
		cd ${TESTDIR}
	fi
	if [ ! -d ${TESTDIR}/${MACHINE}/init.d ]; then
		if [ ! -d ${TESTDIR}/../base ]; then
			die "Cannot create machine directory for ${MACHINE}: no base dir"
		fi

		mkdir -p ${TESTDIR}/${MACHINE}/init.d || die "Couldn't create ${TESTDIR}/${MACHINE}/init.d"
		cd ${TESTDIR}/${MACHINE}/init.d 
		for i in $(/bin/ls ${TESTDIR}/../base/init.d); do
			cp -d ${TESTDIR}/../base/init.d/$i . || die "Couldn't copy $i"
		done
		cd ${TESTDIR}
	fi
	if [ ! -d ${TESTDIR}/${MACHINE}/default ]; then
		if [ ! -d ${TESTDIR}/../base ]; then
			die "Cannot create machine directory for ${MACHINE}: no base dir"
		fi

		mkdir -p ${TESTDIR}/${MACHINE}/default || die "Couldn't create ${TESTDIR}/${MACHINE}/default"
		cd ${TESTDIR}/${MACHINE}/default 
		pwd
		for i in $(/bin/ls ${TESTDIR}/../base/default); do
			echo $i
			cp -d ${TESTDIR}/../base/default/$i . || die "Couldn't copy $i"
		done
		cd ${TESTDIR}
	fi

	# We need unique octets for all machines later.  Generate them now, if
	# they're not configured.
	getdec ${MACHINE}
	if [ "$?" -ne "0" ]; then
		die "getdec() failed"
	fi
	declare DEC_${MACHINE}=${RETVAL}
	DEC=DEC_${MACHINE}
	if [ -z "${!DEC}" ]; then
		die "No ${DEC} configured"
	fi

	gethex ${MACHINE} ${!DEC}
	if [ "$?" -ne "0" ]; then
		die "gethex() failed"
	fi
	declare HEX_${MACHINE}=${RETVAL}
	HEX=HEX_${MACHINE}
	if [ -z "${!HEX}" ]; then
		die "No ${HEX} configured"
	fi

done

# Set up the runtime state
RUNDIR=${TESTDIR}/run
if [ "${PERSISTENT_ROOTFS:=no}" != "yes" ]; then
	echo "Running non-persistent"
	rm -rf ${RUNDIR}
else
	echo "Running persistent"
fi

mkdir -p ${RUNDIR}

# Configure host network access
if [ -n "${HOST_NETWORK}" ]; then
	HOST_NET_IP4=NET_IP4_${HOST_NETWORK}
	if [ -z "${!HOST_NET_IP4}" ]; then
		die "Host is on network ${HOST_NETWORK} but it's not configured"
	fi
	BCAST_IP4=NET_IP4_BCAST_${HOST_NETWORK}
	if [ -z "${!BCAST_IP4}" ]; then
		die "Host is on network ${HOST_NETWORK} but it's not configured"
	fi
	MASKLEN_IP4=NET_IP4_MASKLEN_${HOST_NETWORK}
	if [ -z "${!MASKLEN_IP4}" ]; then
		die "Host is on network ${HOST_NETWORK} but it's not configured"
	fi
	generate_ip4 ${!HOST_NET_IP4} ${DEC_HOST}
	if [ "$?" -ne "0" ]; then
		die "generate_ip4() failed"
	fi

	TAPNAME="uml-tap${HOST_NETWORK}"

	if [ -z ${TESTMODE} ]; then
		sudo tunctl -u ${USER} -t ${TAPNAME}
		sudo ip link set ${TAPNAME} up
		sudo ip addr add ${RETVAL}/${!MASKLEN_IP4} broadcast ${!BCAST_IP4} dev ${TAPNAME}

		NET_IP6=NET_IP6_${HOST_NETWORK}
		MASKLEN_IP6=NET_IP6_MASKLEN_${HOST_NETWORK}
		if [ -n "${!NET_IP6}" ] && [ -n "${!MASKLEN_IP6}" ]; then
			sudo ip addr add ${!NET_IP6}::${HEX_HOST}/${!MASKLEN_IP6} dev ${TAPNAME}
		fi
	fi
fi

# Verify network config and start switch daemons for networks
for NET in ${NETWORKS}; do
	TMP=NET_IP4_${NET}
	if [ -z ${!TMP} ]; then
		die "${TMP} not configured"
	fi
	TMP=NET_IP4_MASKLEN_${NET}
	if [ -z ${!TMP} ]; then
		die "${TMP} not configured"
	fi
	TMP=NET_IP4_BCAST_${NET}
	if [ -z ${!TMP} ]; then
		die "${TMP} not configured"
	fi
	TMP=NET_IP6_${NET}
	if [ -n ${!TMP} ]; then
		# v6 is optional, but both are necessary.
		TMP=NET_IP6_MASKLEN_${NET}
		if [ -z ${!TMP} ]; then
			die "${TMP} not configured"
		fi
	fi

	if [ -z ${TESTMODE} ]; then
		if [ "z${HOST_NETWORK}" == "z${NET}" ]; then
			uml_switch -daemon -unix ${RUNDIR}/network${NET} -tap ${TAPNAME} &
		else
			uml_switch -daemon -unix ${RUNDIR}/network${NET} &
		fi
	fi
done

# Create config for each box
for MACHINE in ${MACHINES}; do
	# We set these above, if they weren't configured
	DEC=DEC_${MACHINE}
	HEX=HEX_${MACHINE}

	echo "Configuring ${MACHINE}"
	if [ ! -d ${TESTDIR}/${MACHINE} ]; then
		die "No config directory for ${MACHINE}"
	fi
	CONFDIR="${TESTDIR}/${MACHINE}/conf.d"
	if [ ! -d ${CONFDIR} ]; then
		die "No conf.d directory for ${MACHINE}"
	fi

	# Create local.start
	echo "local.start"
	echo -e "# /etc/conf.d/local.start" > ${CONFDIR}/local.start
	echo -e "# GENERATED -- DO NOT EDIT" >> ${CONFDIR}/local.start
	echo -e "echo 'core.%e-%p' > /proc/sys/kernel/core_pattern" >> ${CONFDIR}/local.start
	echo -e "env-update" >> ${CONFDIR}/local.start
	LOOP=LOOP_IP4_${MACHINE}
	if [ -n "${!LOOP}" ]; then
		echo -e "ip addr add ${!LOOP} dev lo" >> ${CONFDIR}/local.start
	else
		LOOP="192.${!DEC}.${!DEC}.${!DEC}/32"
		echo -e "ip addr add ${LOOP} dev lo" >> ${CONFDIR}/local.start
	fi
	LOOP=LOOP_IP6_${MACHINE}
	if [ -n "${!LOOP}" ]; then
		echo -e "ip addr add ${!LOOP} dev lo" >> ${CONFDIR}/local.start
	else
		LOOP="fec0:${!HEX}${!HEX}:${!HEX}${!HEX}:${!HEX}${!HEX}::${!HEX}/128"
		echo -e "ip addr add ${LOOP} dev lo" >> ${CONFDIR}/local.start
	fi

	# Create hostname
	echo "hostname"
	echo -e "# /etc/conf.d/hostname" > ${CONFDIR}/hostname
	echo -e "# GENERATED -- DO NOT EDIT" >> ${CONFDIR}/hostname
	echo -e "HOSTNAME='${MACHINE}'" >> ${CONFDIR}/hostname

	# Create domainname
	echo "domainname"
	echo -e "# /etc/conf.d/domainname" > ${CONFDIR}/domainname
	echo -e "# GENERATED -- DO NOT EDIT" >> ${CONFDIR}/domainname
	echo -e "OVERRIDE=1" >> ${CONFDIR}/domainname
	echo -e "DNSDOMAIN=\"${HOST_DOMAIN}\"" >> ${CONFDIR}/domainname
	echo -e "NISDOMAIN=\"nis.${HOST_DOMAIN}\"" >> ${CONFDIR}/domainname

	# Create hosts
	echo "hosts"
	echo -e "# /etc/conf.d/hosts" > ${CONFDIR}/hosts
	echo -e "# GENERATED -- DO NOT EDIT" >> ${CONFDIR}/hosts
	echo -e "127.0.0.1\tlocalhost" >> ${CONFDIR}/hosts
	for DNS_MCH in ${MACHINES}; do
		DNS_IP=DNS_IP_${DNS_MCH}
		if [ -n "${!DNS_IP}" ]; then
			DNS=${!DNS_IP}
		elif [ -n "${HOST_NETWORK}" ]; then
			TMP=DEC_${DNS_MCH}
			generate_ip4 ${!HOST_NET_IP4} ${!TMP}
			if [ "$?" -ne "0" ]; then
				die "generate_ip4() failed"
			fi
			DNS=${RETVAL}
		else
			die "You must either set ${DNS_IP} or HOST_NETWORK"
		fi
		echo -e "${DNS}\t${DNS_MCH}.${HOST_DOMAIN} ${DNS_MCH}" >> ${CONFDIR}/hosts
	done
	if [ -n "${HOST_IP4}" ]; then
		# Add name of host
		echo -e "${HOST_IP4}\t$(hostname).$(dnsdomainname) $(hostname)" >> ${CONFDIR}/hosts
	fi

	# Create net and net.<filename>
	echo "net"
	echo -e "# /etc/conf.d/net" > ${CONFDIR}/net
	echo -e "# GENERATED -- DO NOT EDIT" >> ${CONFDIR}/net
	echo -e "modules=( 'iproute2' )" >> ${CONFDIR}/net
	NETS=NETWORKS_${MACHINE}
	if [ -z "${!NETS}" ]; then
		# Default to all networks
		declare NETWORKS_${MACHINE}="${NETWORKS}"
	fi
	for NET in ${!NETS}; do
		# Verify network is configured
		TMP=NET_IP4_${NET}
		if [ -z "${!TMP}" ]; then
			die "Network ${NET} not configured"
		fi

		getnetdev ${MACHINE} ${NET}
		if [ "$?" -ne "0" ]; then
			die "getnetdev() failed"
		fi
		NETDEV=${RETVAL}

		# Make net.${NETDEV} symlink to net.lo
		ln -sf /etc/init.d/net.lo ${TESTDIR}/${MACHINE}/init.d/net.${NETDEV}
		# Make net.${NETDEV} symlink to autostart network
		ln -sf /etc/init.d/net.lo ${TESTDIR}/${MACHINE}/default/net.${NETDEV}

		NETIP4=NETIP4_${MACHINE}_${NET}
		if [ -n "${!NETIP4}" ]; then
			TMP=${!NETIP4}
		else
			NETIP4=NET_IP4_${NET}
			MASKLEN=NET_IP4_MASKLEN_${NET}
			generate_ip4 ${!NETIP4} ${!DEC}
			if [ "$?" -ne "0" ]; then
				die "generate_ip4() failed"
			fi
			TMP="${RETVAL}/${!MASKLEN}"
		fi
		echo -e "config_${NETDEV}=(" >> ${CONFDIR}/net
		echo -e "\t\"${TMP}\"" >> ${CONFDIR}/net

		NETIP6=NETIP6_${MACHINE}_${NET}
		if [ -n "${!NETIP6}" ]; then
			TMP=${!NETIP6}
		else
			NETIP6=NET_IP6_${NET}
			MASKLEN=NET_IP6_MASKLEN_${NET}
			TMP="${!NETIP6}::${!HEX}/${!MASKLEN}"
		fi
		echo -e "\t\"${TMP}\"" >> ${CONFDIR}/net
		echo -e ")" >> ${CONFDIR}/net
	done

done

if [ -n "${XTERM}" ]; then
	XTERMLINE="xterm=${XTERM}"
fi

# Start up each UML box
for MACHINE in ${MACHINES}; do
	ETHLINE=""

	TMAC=HEX_${MACHINE}
	if [ -z "${!TMAC}" ]; then
		die "No HEX octet configured for ${MACHINE}"
	fi

	NETS=NETWORKS_${MACHINE}
	if [ -z "${!NETS}" ]; then
		die "No ${NETS}"
	fi

	# Build network list for each network
	for NET in ${!NETS}; do
		NETMACBYTE=$(printf "%02d" ${NET})
		getnetdev ${MACHINE} ${NET}
		if [ "$?" -ne "0" ]; then
			die "getnetdev() failed"
		fi
		NETDEV=${RETVAL}

		ETHLINE="${ETHLINE} ${NETDEV}=daemon,FE:FD:67:45:${NETMACBYTE}:${!TMAC},unix,${RUNDIR}/network${NET}"
	done

	if [ -z "${ETHLINE}" ]; then
		die "No ethernets configured for ${MACHINE}"
	fi

	# Mount /stuff, /share, and /home
	#echo sudo mount -o bind /stuff ${TESTDIR}/${MACHINE}/stuff
	#echo sudo mount -o bind /share ${TESTDIR}/${MACHINE}/share
	#echo sudo mount -o bind /home ${TESTDIR}/${MACHINE}/home

	if [ -z ${TESTMODE} ]; then
		echo "Starting ${MACHINE}"
		screen -DmS uml-${MACHINE} -t ${MACHINE} ${TESTDIR}/${LINUX} umid=${MACHINE} \
			ubd0=${RUNDIR}/${ROOTFS}.${MACHINE}.cow,${TESTDIR}/${ROOTFS} \
 			ubd1=${RUNDIR}/${SWAPFS}.${MACHINE}.cow,${TESTDIR}/${SWAPFS} \
			mem=${MEM} ${ETHLINE} hostfs=${TESTDIR}/${MACHINE} \
			${XTERMLINE} &
	else
		echo "Test mode; not starting ${MACHINE}"
	fi
done

if [ -n "${TESTMODE}" ]; then
	# Done
	exit
fi

sleep 1
SCREENPIDS=$(screen -ls | grep uml | awk -F . '{print $1}')
if [ -n "${SCREENPIDS}" ]; then
	wait ${SCREENPIDS}
fi

# clean up after ourselves
UMLcleanup
